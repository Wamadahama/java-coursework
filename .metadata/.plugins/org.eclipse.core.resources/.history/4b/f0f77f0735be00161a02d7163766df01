/**
 * @author Elijah Ellis
 * Thursday December 8th 2016
 * LoShuMagic 
 */
public class LoShuMagic {
	// Test method, checks the conditions of a Lo Shu Magic Square 
	public boolean test(int[][] array) {
		
		// LoShu Magic Square CONDITON 1 
		// Test the array to see if there are any numbers that are greater than 9 
		// Also flatten the array into a temp array so we can easily check if there are
		// unique 1 through 9 

		int[] temp = new int[9];
		int ctr = 0; // counter for the temp population 

		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array[i].length; j++) {
				
				// Populate temp 
				temp[ctr] = array[i][j];
				
				// If there is a value greater than 9 exit 
				if (array[i][j] > 9) {
					return false;
				}
				
				ctr++;
			}
		}
		
		// Determine if the array contains distinct value
		// This can be done by performing a modified selection sort
		// and returning false if there is any equality 
		for (int j = 0; j < temp.length-1; j++) {
			int min = j; // First element is the supposed min 
			
			// Check against the rest of the array 
			for(int i = j+1; i < temp.length; ++i){
				if (temp[min] == temp[i]) { // If there is an equality then there are duplicated i.e 1 and 1 
					return false;
				}
			}
		}
			
		
		// LoShu Magic Square CONDITION 2 
		int[] rowSums  = new int[3]; 
		int[] colSums  = new int[3];
		int[] diagSums = new int[2]; 		
		
		
		// Sum up each row 
		for (int i = 0; i < array[0].length; i++) {
			for (int j = 0; j < array[i].length; j++) { 
				rowSums[i] += array[i][j]; 
			}
		}
		
		// Sum diagonally, in this case we are going to have two statements becuase
		// There are two diagonals (3 x 3) so there will be two iterators 
		for (int i = 0; i < array[0].length; i++) {
			diagSums[0] += array[i][i];
		}
		
		// Sum the other diagonal 
		// This will walk backwards effectively 
		for (int i = array[0].length-1; i == 0; i--){
			System.out.println(i + " " + i);
			System.out.println(array[i][i]);
			diagSums[1] += array[i][i];
		}
		
		for (int i = 0; i < diagSums.length; i++) {
			System.out.println(diagSums[i]);
		}
		return true;
		
	}
}
